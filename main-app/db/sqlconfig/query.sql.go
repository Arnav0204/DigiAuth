// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package db

import (
	"context"
)

const createConnection = `-- name: CreateConnection :exec
INSERT INTO connections (connection_id, id, alias, my_role)
VALUES ($1, $2, $3, $4)
`

type CreateConnectionParams struct {
	ConnectionID string
	ID           int64
	Alias        string
	MyRole       RoleEnum
}

func (q *Queries) CreateConnection(ctx context.Context, arg CreateConnectionParams) error {
	_, err := q.db.Exec(ctx, createConnection,
		arg.ConnectionID,
		arg.ID,
		arg.Alias,
		arg.MyRole,
	)
	return err
}

const getConnectionsByUserID = `-- name: GetConnectionsByUserID :many
SELECT connection_id, id, alias, my_role 
FROM connections
WHERE id = $1
`

func (q *Queries) GetConnectionsByUserID(ctx context.Context, id int64) ([]Connection, error) {
	rows, err := q.db.Query(ctx, getConnectionsByUserID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Connection
	for rows.Next() {
		var i Connection
		if err := rows.Scan(
			&i.ConnectionID,
			&i.ID,
			&i.Alias,
			&i.MyRole,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
